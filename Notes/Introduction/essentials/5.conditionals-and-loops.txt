1> Earlier we use some structural directive like *ngIf, *ngFor or *ngSwitch. To use these
we need to import commonModule in the app.module.ts file.

2> But now we can use @if , @for or @ngSwitch
->it is more close to javascript syntax
-> no imports required
-> if-else if-else is possible that is not possible earlier using directive
-> it is no-more structural directive. It is automatically available in template engine.

-> 
@Component({
  standalone: true,
  selector: 'user-controls',
  template: `
    @if (isAdmin) {
      <button>Erase database</button>
    }
  `,
})
export class UserControls {
  isAdmin = true;
}

->
/ user-controls.component.ts
@Component({
  standalone: true,
  selector: 'user-controls',
  template: `
    @if (isAdmin) {
      <button>Erase database</button>
    } @else {
      <p>You are not authorized.</p>
    }
  `,
})
export class UserControls {
  isAdmin = true;
}

-> rendering a list
<ul>
  @for (ingredient of ingredientList; track ingredient.name) {
    <li>{{ ingredient.quantity }} - {{ ingredient.name }}</li>
  }
</ul>

@Component({
  standalone: true,
  selector: 'ingredient-list',
  templateUrl: './ingredient-list.component.html',
})
export class IngredientList {
  ingredientList = [
    {name: 'noodles', quantity: 1},
    {name: 'miso broth', quantity: 1},
    {name: 'egg', quantity: 2},
  ];
}

When Angular renders a list of elements with @for, those items can later change or move. 
Angular needs to track each element through any reordering, usually by treating a property of the 
item as a unique identifier or key.

This ensures any updates to the list are reflected correctly in the UI and 
tracked properly within Angular, especially in the case of stateful elements or animations.
To accomplish this, we can provide a unique key to Angular with the track keyword.
